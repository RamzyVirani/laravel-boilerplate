<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_APP$\Helper\BreadcrumbsRegister;
use $NAMESPACE_DATATABLES$\$MODEL_NAME$DataTable;
use $NAMESPACE_REQUEST$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Laracasts\Flash\Flash;
use Illuminate\Http\Response;

class $MODEL_NAME$Controller extends AppBaseController
{
    /** ModelName */
    private $ModelName;

    /** BreadCrumbName */
    private $BreadCrumbName;

    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
        $this->ModelName = '$MODEL_NAME_PLURAL_DASHED$';
        $this->BreadCrumbName = '$MODEL_NAME_PLURAL_HUMAN$';
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param $MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable
     * @return Response
     */
    public function index($MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable)
    {
        BreadcrumbsRegister::Register($this->ModelName,$this->BreadCrumbName);
        return $$MODEL_NAME_CAMEL$DataTable->render('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index', ['title' => $this->BreadCrumbName]);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        BreadcrumbsRegister::Register($this->ModelName,$this->BreadCrumbName);
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create')->with(['title' => $this->BreadCrumbName]);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->saveRecord($request);

        Flash::success($this->BreadCrumbName . ' saved successfully.');
        if (isset($request->continue)) {
            $redirect_to = redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.create'));
        } elseif (isset($request->translation)) {
            $redirect_to = redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.edit', $$MODEL_NAME_CAMEL$->id));
        } else {
            $redirect_to = redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }
        return $redirect_to->with([
            'title' => $this->BreadCrumbName
        ]);
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error($this->BreadCrumbName . ' not found');
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }

        BreadcrumbsRegister::Register($this->ModelName,$this->BreadCrumbName, $$MODEL_NAME_CAMEL$);
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with(['$MODEL_NAME_CAMEL$' => $$MODEL_NAME_CAMEL$, 'title' => $this->BreadCrumbName]);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error($this->BreadCrumbName . ' not found');
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }

        BreadcrumbsRegister::Register($this->ModelName,$this->BreadCrumbName, $$MODEL_NAME_CAMEL$);
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with(['$MODEL_NAME_CAMEL$' => $$MODEL_NAME_CAMEL$, 'title' => $this->BreadCrumbName]);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error($this->BreadCrumbName . ' not found');
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->updateRecord($request, $$MODEL_NAME_CAMEL$);

        Flash::success($this->BreadCrumbName . ' updated successfully.');
        if (isset($request->continue)) {
            $redirect_to = redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.create'));
        } else {
            $redirect_to = redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }
        return $redirect_to->with(['title' => $this->BreadCrumbName]);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error($this->BreadCrumbName . ' not found');
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
        }

        $this->$MODEL_NAME_CAMEL$Repository->deleteRecord($id);

        Flash::success($this->BreadCrumbName . ' deleted successfully.');
        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'))->with(['title' => $this->BreadCrumbName]);
    }
}
